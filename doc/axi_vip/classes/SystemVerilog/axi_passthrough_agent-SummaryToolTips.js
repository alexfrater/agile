NDSummary.OnToolTipsLoaded("SystemVerilogClass:axi_passthrough_agent",{889:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">AXI Passthrough Agent Class.</div></div>",1098:"<div class=\"NDToolTip TInformation LSystemVerilog\"><div class=\"TTSummary\">axi_monitor&nbsp; `AXI_PARAM_ORDER monitor;</div></div>",1100:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1100\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function new</span> (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"first\"></td><td class=\"PType\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">name&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHString\">&quot;unnamed_axi_passthrough_agent&quot;</span>,</td></tr><tr><td class=\"PModifierQualifier first\"><span class=\"SHKeyword\">virtual interface</span> axi_vip_if `</td><td class=\"PType\">AXI_PARAM_ORDER&nbsp;</td><td class=\"PName\">vif</td><td></td><td class=\"last\"></td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Constructor to create an AXI Passthrough Agent.~name~ is the instance name and axi_vip_if is the interface in the design.&nbsp; Please see PG267 for how to find the interface in design hierarchy.</div></div>",1167:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1167\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual function void</span> set_verbosity(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\">xil_verbosity&nbsp;</td><td class=\"PName last\">updated</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sets the verbosity of the axi_passthrough_agent and all sub classes to determine whether the information will be printed out or not.Refer xil_verbosity for usage</div></div>",1168:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1168\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual function void</span> set_agent_tag(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName last\">updated</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sets the tag of the axi_passthrough_agent and all sub classes. If more than one VIPs(in passthrough mode) being used in the same testbench, User can use set_agent_tag with different tag to tell where exactly the log message comes from.</div></div>",1103:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1103\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function void</span> set_vif(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">axi_vif_mem_proxy `</td><td class=\"PType\">AXI_PARAM_ORDER&nbsp;</td><td class=\"PName last\">vif</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sets the Agent\'s virtual interface. This is the interface that will be monitored and/or driven.</div></div>",895:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype895\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function void</span> set_wr_transaction_depth(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_uint&nbsp;</td><td class=\"PName last\">update</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sets the maximum number of WRITE transactions that the axi_passthrough_agent will have in flight at one time.</div></div>",1105:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1105\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">function</span> xil_axi_uint get_wr_transaction_depth();</div><div class=\"TTSummary\">Returns the maximum number of WRITE transactions that the axi_passthrough_agent will have in flight at one time.</div></div>",897:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype897\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function void</span> set_rd_transaction_depth(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_uint&nbsp;</td><td class=\"PName last\">update</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sets the maximum number of READ transactions that the axi_passthrough_agent will have in flight at one time.</div></div>",1107:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1107\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">function</span> xil_axi_uint get_rd_transaction_depth();</div><div class=\"TTSummary\">Returns the maximum number of READ transactions that the axi_passthrough_agent will have in flight at one time.</div></div>",898:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype898\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">function void</span> enable_transaction_depth_checks();</div><div class=\"TTSummary\">Turn on transaction depth check and its monitor\'s enable_transaction_depth_checks in axi_passthrough_agent</div></div>",1109:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1109\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">function void</span> disable_transaction_depth_checks();</div><div class=\"TTSummary\">Turn off transaction depth check and its monitor\'s enable_transaction_depth_checks in axi_passthrough_agent</div></div>",1110:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1110\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">virtual</span> task start_monitor();</div><div class=\"TTSummary\">Enables the monitor in this agent to start collecting data.</div></div>",909:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype909\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">virtual</span> task start_master();</div><div class=\"TTSummary\">Enables runtime master mode READ and WRITE drivers of this agent. Start monitor to collect data.&nbsp; The drivers will only issue axi transactions when the send functions are called.</div></div>",910:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype910\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">virtual</span> task start_slave();</div><div class=\"TTSummary\">Enables runtime slave mode READ and WRITE drivers of this agent. start monitor to collect data.&nbsp; The drivers will only issue ready when the send functions are called.</div></div>",1113:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1113\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">virtual</span> task stop_master();</div><div class=\"TTSummary\">Disables the READ and WRITE drivers of the master. Once disabled, no further action will occur by the drivers.</div></div>",1114:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1114\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">virtual</span> task halt_master();</div><div class=\"TTSummary\">Allows for all inflight transactions to complete and no new transaction will be serviced. All other transactions will halt.</div></div>",1115:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1115\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">virtual</span> task resume_master();</div><div class=\"TTSummary\">Resumes processing of the pending transactions.</div></div>",1116:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1116\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">virtual</span> task stop_slave();</div><div class=\"TTSummary\">Disables the READ and WRITE drivers of the slave. Once disabled, no further action will occur by the drivers.</div></div>",911:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype911\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">virtual</span> task stop_monitor();</div><div class=\"TTSummary\">Disables the monitor in this agent from start collecting data. Once disabled, no further action will occur by the monitor.</div></div>",1118:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1118\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">virtual</span> task set_nobackpressure_readies();</div><div class=\"TTSummary\">Convenience function to set the RREADY/BREADY of the master and ARREADY/WREADY/AWREADY of the slave to not apply any backpressure to the simulation.</div></div>",912:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype912\" class=\"NDPrototype NoParameterForm\">task wait_mst_drivers_idle();</div><div class=\"TTSummary\">This API will be used when axi_passthrough_agent is in runtime master mode. It will not return until all the downstream transactions have completed.</div></div>",1120:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1120\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual</span> task AXI4_READ_BURST (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_uint&nbsp;</td><td class=\"PName last\">id,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_ulong&nbsp;</td><td class=\"PName last\">addr,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_len_t&nbsp;</td><td class=\"PName last\">len,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_size_t&nbsp;</td><td class=\"PName last\">size,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_burst_t&nbsp;</td><td class=\"PName last\">burst,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_lock_t&nbsp;</td><td class=\"PName last\">lock,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_cache_t&nbsp;</td><td class=\"PName last\">cache,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_prot_t&nbsp;</td><td class=\"PName last\">prot,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_region_t&nbsp;</td><td class=\"PName last\">region,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_qos_t&nbsp;</td><td class=\"PName last\">qos,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_user_beat&nbsp;</td><td class=\"PName last\">aruser,</td></tr><tr><td class=\"PModifierQualifier first\">output bit&nbsp;</td><td class=\"PType\">[<span class=\"SHNumber\">8</span>*<span class=\"SHNumber\">4096</span>-<span class=\"SHNumber\">1</span>:<span class=\"SHNumber\">0</span>]&nbsp;</td><td class=\"PName last\">data,</td></tr><tr><td class=\"PModifierQualifier first\">output xil_axi_resp_t&nbsp;</td><td class=\"PType\">[<span class=\"SHNumber\">255</span>:<span class=\"SHNumber\">0</span>]&nbsp;</td><td class=\"PName last\">resp,</td></tr><tr><td class=\"PModifierQualifier first\">output xil_axi_data_beat&nbsp;</td><td class=\"PType\">[<span class=\"SHNumber\">255</span>:<span class=\"SHNumber\">0</span>]&nbsp;</td><td class=\"PName last\">ruser&nbsp;</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">This task does a full read process for AXI4 when this passthrough agent is in runtime master mode. It is composed of a series of tasks and functions,it first creates transaction from master read driver,sets up the transaction, sends it and then waits till response back.&nbsp; This task returns when the read transaction is complete.</div></div>",1121:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1121\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual</span> task AXI3_READ_BURST (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_uint&nbsp;</td><td class=\"PName last\">id,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_ulong&nbsp;</td><td class=\"PName last\">addr,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_len_t&nbsp;</td><td class=\"PName last\">len,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_size_t&nbsp;</td><td class=\"PName last\">size,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_burst_t&nbsp;</td><td class=\"PName last\">burst,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_lock_t&nbsp;</td><td class=\"PName last\">lock,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_cache_t&nbsp;</td><td class=\"PName last\">cache,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_prot_t&nbsp;</td><td class=\"PName last\">prot,</td></tr><tr><td class=\"PModifierQualifier first\">output bit&nbsp;</td><td class=\"PType\">[<span class=\"SHNumber\">8</span>*<span class=\"SHNumber\">2048</span>-<span class=\"SHNumber\">1</span>:<span class=\"SHNumber\">0</span>]&nbsp;</td><td class=\"PName last\">data,</td></tr><tr><td class=\"PModifierQualifier first\">output xil_axi_resp_t&nbsp;</td><td class=\"PType\">[<span class=\"SHNumber\">15</span>:<span class=\"SHNumber\">0</span>]&nbsp;</td><td class=\"PName last\">resp&nbsp;</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">This task does a full read process for AXI3 when this passthrough agent is in runtime master mode.It is composed of a series of tasks and functions,it first creates transaction from master read driver,sets up the transaction, sends it and then waits till response back.&nbsp; This task returns when the read transaction is complete.</div></div>",1122:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1122\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual</span> task AXI4LITE_READ_BURST (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_ulong&nbsp;</td><td class=\"PName last\">addr,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_prot_t&nbsp;</td><td class=\"PName last\">prot,</td></tr><tr><td class=\"PModifierQualifier first\">output bit&nbsp;</td><td class=\"PType\">[<span class=\"SHNumber\">8</span>*<span class=\"SHNumber\">8</span>-<span class=\"SHNumber\">1</span>:<span class=\"SHNumber\">0</span>]&nbsp;</td><td class=\"PName last\">data,</td></tr><tr><td class=\"PModifierQualifier first\">output&nbsp;</td><td class=\"PType\">xil_axi_resp_t&nbsp;</td><td class=\"PName last\">resp&nbsp;</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">This task does a full read process for AXI4LITE when this passthrough agent is in runtime master mode.It is composed of a series of tasks and functions,it first creates transaction from master read driver,sets up the transaction, sends it and then waits till response back.&nbsp; This task returns when the read transaction is complete.</div></div>",1123:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1123\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual</span> task AXI4_WRITE_BURST (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_uint&nbsp;</td><td class=\"PName last\">id,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_ulong&nbsp;</td><td class=\"PName last\">addr,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_len_t&nbsp;</td><td class=\"PName last\">len,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_size_t&nbsp;</td><td class=\"PName last\">size,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_burst_t&nbsp;</td><td class=\"PName last\">burst,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_lock_t&nbsp;</td><td class=\"PName last\">lock,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_cache_t&nbsp;</td><td class=\"PName last\">cache,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_prot_t&nbsp;</td><td class=\"PName last\">prot,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_region_t&nbsp;</td><td class=\"PName last\">region,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_qos_t&nbsp;</td><td class=\"PName last\">qos,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_user_beat&nbsp;</td><td class=\"PName last\">awuser,</td></tr><tr><td class=\"PModifierQualifier first\">input bit&nbsp;</td><td class=\"PType\">[<span class=\"SHNumber\">8</span>*<span class=\"SHNumber\">4096</span>-<span class=\"SHNumber\">1</span>:<span class=\"SHNumber\">0</span>]&nbsp;</td><td class=\"PName last\">data,</td></tr><tr><td class=\"PModifierQualifier first\">input xil_axi_data_beat&nbsp;</td><td class=\"PType\">[<span class=\"SHNumber\">255</span>:<span class=\"SHNumber\">0</span>]&nbsp;</td><td class=\"PName last\">wuser,</td></tr><tr><td class=\"PModifierQualifier first\">output&nbsp;</td><td class=\"PType\">xil_axi_resp_t&nbsp;</td><td class=\"PName last\">resp&nbsp;</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">This task does a full write process for AXI4. It is composed of a series of tasks and&nbsp; functions.It first creates transaction from master write driver,sets up the transaction, sends it and then waits till response back.&nbsp; This task returns when the complete write transaction is complete.</div></div>",1124:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1124\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual</span> task AXI3_WRITE_BURST (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_uint&nbsp;</td><td class=\"PName last\">id,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_ulong&nbsp;</td><td class=\"PName last\">addr,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_len_t&nbsp;</td><td class=\"PName last\">len,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_size_t&nbsp;</td><td class=\"PName last\">size,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_burst_t&nbsp;</td><td class=\"PName last\">burst,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_lock_t&nbsp;</td><td class=\"PName last\">lock,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_cache_t&nbsp;</td><td class=\"PName last\">cache,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_prot_t&nbsp;</td><td class=\"PName last\">prot,</td></tr><tr><td class=\"PModifierQualifier first\">input bit&nbsp;</td><td class=\"PType\">[<span class=\"SHNumber\">8</span>*<span class=\"SHNumber\">2048</span>-<span class=\"SHNumber\">1</span>:<span class=\"SHNumber\">0</span>]&nbsp;</td><td class=\"PName last\">data,</td></tr><tr><td class=\"PModifierQualifier first\">output&nbsp;</td><td class=\"PType\">xil_axi_resp_t&nbsp;</td><td class=\"PName last\">resp&nbsp;</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">This task does a full write process for AXI3.It is composed of a series of tasks and&nbsp; functions.It first creates transaction from master write driver,sets up the transaction, sends it and then waits till response back.&nbsp; This task returns when the complete write transaction is complete.</div></div>",1125:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1125\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual</span> task AXI4LITE_WRITE_BURST (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_ulong&nbsp;</td><td class=\"PName last\">addr,</td></tr><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_prot_t&nbsp;</td><td class=\"PName last\">prot,</td></tr><tr><td class=\"PModifierQualifier first\">input bit&nbsp;</td><td class=\"PType\">[<span class=\"SHNumber\">8</span>*<span class=\"SHNumber\">8</span>-<span class=\"SHNumber\">1</span>:<span class=\"SHNumber\">0</span>]&nbsp;</td><td class=\"PName last\">data,</td></tr><tr><td class=\"PModifierQualifier first\">output&nbsp;</td><td class=\"PType\">xil_axi_resp_t&nbsp;</td><td class=\"PName last\">resp&nbsp;</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">This task does a full write process for AXI4LITE.It is composed of a series of tasks and&nbsp; functions.It first creates transaction from master write driver,sets up the transaction, sends it and then waits till response back.&nbsp; This task returns when the complete write transaction is complete.</div></div>"});