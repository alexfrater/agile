NDSummary.OnToolTipsLoaded("SystemVerilogClass:axi_slv_rd_driver",{1017:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">AXI Slave Read Driver Class. It does below: Receives AR Command from the interface and then passes that command to the user environment. The user will then create a READ transaction and pass it back to the driver to drive the R channel.</div></div>",1019:"<div class=\"NDToolTip TInformation LSystemVerilog\"><div class=\"TTSummary\">axi_vif_mem_proxy `AXI_PARAM_ORDER&nbsp; vif_proxy; AXI VIF Proxy Class</div></div>",755:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype755\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function new</span>(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">name&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHString\">&quot;unnamed_axi_slv_rd_driver&quot;</span></td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Constructor to create an AXI slave read driver, ~name~ is the instance name.</div></div>",756:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype756\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function void</span> set_reorder_data_ability (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_reorder_ability_t&nbsp;</td><td class=\"PName last\">value</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sets reorder_data_ability of the slave read driver. please refer &lt;set_xfer_preemptive_probability&gt; in  axi_transaction for more information.</div></div>",757:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype757\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">function</span> xil_axi_reorder_ability_t get_reorder_data_ability ();</div><div class=\"TTSummary\">Returns reorder_data_ability of the slave read driver. please refer &lt;set_xfer_preemptive_probability&gt; in  axi_transaction for more information.</div></div>",1024:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1024\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function void</span> set_vif(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">axi_vif_mem_proxy `</td><td class=\"PType\">AXI_PARAM_ORDER&nbsp;</td><td class=\"PName last\">vif</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Assigns the virtual interface of the slave read driver.</div></div>",760:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype760\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function void</span> set_arready_gen(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">axi_ready_gen_t&nbsp;</td><td class=\"PName last\">new_method</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sets arready of the AXI slave read driver. There are three ways for arready generation in AXI slave read driver.</div></div>",1026:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1026\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">function</span> axi_ready_gen_t get_arready_gen();</div><div class=\"TTSummary\">Returns the arready_gen of the slave read driver.</div></div>",1011:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1011\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function void</span> set_forward_progress_timeout_value (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_uint&nbsp;</td><td class=\"PName last\">new_timeout</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sets the number of cycles that the driver will wait until it will flag a watch dog error of the axi_slv_rd_driver. Default value is 50000. Setting this to a very large value will cause a hung simulation to continue for a longer time.&nbsp; Setting this to a very small number may not allow enough time for simulation to respond.</div></div>",1012:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1012\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">function</span> xil_axi_uint get_forward_progress_timeout_value ();</div><div class=\"TTSummary\">Returns the number of cycles that the driver will wait&nbsp; until it will flag a watch dog error of the axi_slv_rd_driver. Default value is 50000 and user can use set_forward_progress_timeout_value to change it.</div></div>",1029:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1029\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function void</span> set_waiting_valid_timeout_value (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_uint&nbsp;</td><td class=\"PName last\">new_timeout</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sets waiting_valid_timeout_value of the slave read driver. waiting_valid_timeout_value is used for driver to wait a certain number of cycles for rvalid/rready handshake occurs before it time out.</div></div>",1030:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1030\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">function</span> xil_axi_uint get_waiting_valid_timeout_value ();</div><div class=\"TTSummary\">Returns waiting_valid_timeout_value of the slave read driver</div></div>",1031:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div class=\"TTSummary\">Returns the maximum number of WRITE transactions that the slave read driver will have in flight at one time.</div></div>",1032:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div class=\"TTSummary\">Returns the maximum number of WRITE transactions that the slave read driver will have in flight at one time.</div></div>",1033:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1033\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">function</span> xil_axi_uint get_num_pending_cmds();</div><div class=\"TTSummary\">Returns number of commands in pending of the slave read driver.</div></div>",1034:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1034\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">function</span> xil_axi_uint get_cmds_inflight();</div><div class=\"TTSummary\">Returns number of commands in flight of the slave read driver.</div></div>",1035:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1035\" class=\"NDPrototype NoParameterForm\">task run_phase();</div><div class=\"TTSummary\">Start control processes for operation of the slave read driver.</div></div>",1036:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1036\" class=\"NDPrototype NoParameterForm\"><span class=\"SHKeyword\">virtual</span> task stop_phase();</div><div class=\"TTSummary\">Stops all control processes of the slave read driver.</div></div>",1037:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1037\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual function</span> axi_transaction create_transaction (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">name&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHString\">&quot;unnamed_transaction&quot;</span></td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Returns an AXI transaction class that has been &quot;newed&quot; of the slave read driver.</div></div>",762:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype762\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">task get_rd_reactive (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">output&nbsp;</td><td class=\"PType\">axi_transaction&nbsp;</td><td class=\"PName last\">transfer</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Returns Read reactive transaction with read command information.&nbsp; When Slave VIP instantiate agent without memory, user can use this API to create an AXI transaction,fill in data information and send it back to Slave VIP interface.</div></div>",763:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype763\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">task send_arready(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">axi_ready_gen&nbsp;</td><td class=\"PName last\">t</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sends the ready structure to the slave read driver for controlling the ARREADY channel. This is blocking process which will not return till this ready is being sent out.</div></div>",1076:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1076\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">virtual function</span> axi_ready_gen create_ready (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PType first\"><span class=\"SHKeyword\">string</span>&nbsp;</td><td class=\"PName\">name&nbsp;</td><td class=\"PDefaultValueSeparator\">=&nbsp;</td><td class=\"PDefaultValue last\"><span class=\"SHString\">&quot;unnamed_ready&quot;</span></td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Returns a ready class in the slave read driver that has been &quot;newed&quot; with instance name ~name~.</div></div>",764:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype764\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">task send(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">axi_transaction&nbsp;</td><td class=\"PName last\">t</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sends the AXI transaction to the slave read driver. This is blocking process which will not return till this transaction is being sent out.</div></div>",1042:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1042\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">task wait_rsp(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">output&nbsp;</td><td class=\"PType\">axi_transaction&nbsp;</td><td class=\"PName last\">t</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">This blocking function will not return until slave read driver send back response transaction</div></div>"});