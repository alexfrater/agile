NDContentPage.OnToolTipsLoaded({133:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">The xil_seq_item_pull_port#(REQ,RSP) class is extends from xil_sqr_if_base. It inherits all these variables and functions of xil_sqr_if_base.</div></div>",367:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Xilinx AXI VIP Interger unsigned data type</div></div>",388:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">This policy type informs the driver if the driver can re-order transactions that it is still processing.&nbsp; For READ transactions, the driver can return the RDATA beats from different RID\'s in a different order than they were received.&nbsp; For WRITE transactions, the driver uses this policy to determine if it can return BRESP\'s in a different order than they were received.</div></div>",391:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Xilinx AXI VIP Boolean data type</div></div>",394:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">The order between write command and write data</div></div>",516:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">The axi_transaction class is the base class of AXI protocol. It inherits all the methods of xil_sequence_item.</div></div>",631:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">AXI VIF Proxy Class. It has virtual interface for AXI VIP interface.</div></div>",747:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">AXI Ready generation class.</div></div>",753:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype753\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function void</span> set_awready_gen(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">axi_ready_gen_t&nbsp;</td><td class=\"PName last\">new_gen</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sets awready of the AXI slave write driver. There are three ways for awready generation in AXI slave write driver.</div></div>",754:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype754\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function void</span> set_wready_gen(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">axi_ready_gen_t&nbsp;</td><td class=\"PName last\">new_gen</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sets wready of the AXI slave write driver. There are three ways for wready generation in AXI slave write driver.</div></div>",977:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">AXI Slave Write Driver Class.It does : Receives AW Command and the WLAST from the interface and then passes that transaction to the user environment, the user will then create a BRESP transaction and pass it back to the driver to drive the B channel.</div></div>",1008:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1008\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\"><span class=\"SHKeyword\">function void</span> set_forward_progress_timeout_value (</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">xil_axi_uint&nbsp;</td><td class=\"PName last\">new_timeout</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sets the number of cycles that the driver will wait for AW/W/B accepted until it will flag a watch dog error of the axi_slv_wr_driver. Default value is 50000. Setting this to a very large value will cause a hung simulation to continue for a longer time.&nbsp; Setting this to a very small number may not allow enough time for simulation to respond.</div></div>",1039:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1039\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">task send_wready(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">axi_ready_gen&nbsp;</td><td class=\"PName last\">t</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sends the ready structure to the slave write driver for controlling the WREADY channel.This is blocking process which will not return till this ready is being sent out.</div></div>",1070:"<div class=\"NDToolTip TFunction LSystemVerilog\"><div id=\"NDPrototype1070\" class=\"NDPrototype WideForm CStyle\"><table><tr><td class=\"PBeforeParameters\">task send_awready(</td><td class=\"PParametersParentCell\"><table class=\"PParameters\"><tr><td class=\"PModifierQualifier first\">input&nbsp;</td><td class=\"PType\">axi_ready_gen&nbsp;</td><td class=\"PName last\">t</td></tr></table></td><td class=\"PAfterParameters\">);</td></tr></table></div><div class=\"TTSummary\">Sends the ready structure to the slave write driver for controlling the AWREADY channel.his is blocking process which will not return till this ready is being sent out.</div></div>"});