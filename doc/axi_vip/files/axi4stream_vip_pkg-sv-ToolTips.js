NDContentPage.OnToolTipsLoaded({54:"<div class=\"NDToolTip TMacro LSystemVerilog\"><div class=\"TTSummary\">Xilinx VIP macro for information which gives informative message when LEVEL is bigger than 300.&nbsp; Else, it is silent.</div></div>",59:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Xilinx VIP Interger unsigned data type</div></div>",60:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Xilinx VIP verbosity data type. When verbosity is bigger than 300, information will be printed out</div></div>",61:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Xilinx AXI4STREAM VIP Interger unsigned data type</div></div>",62:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Xilinx AXI4STREAM VIP longint unsigned data type</div></div>",64:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Xilinx AXI4STREAM VIP data byte</div></div>",66:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Xilinx AXI4STREAM VIP&nbsp; user beat data type</div></div>",67:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Xilinx AXI4STREAM VIP data beat data type</div></div>",68:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Xilinx AXI4STREAM VIP&nbsp; strobe beat data type</div></div>",70:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Policies of the transaction to inform the driver whether to return the transaction back to the issuer Depending on the policy the driver will return the transaction at different points in the life of the transaction.</div></div>",71:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Collection of policies that describe how the TREADY signals will behave. These policies can introduce backpressure into the system to find design faults. Refer PG277 section about READY Generation for more details.</div></div>",72:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Collection of policies that describe how the TREADY signals will behave when xil_axi4stream_ready_gen_policy is XIL_AXI4STREAM_READY_GEN_RANDOM. Refer PG277 section about READY Generation for more details.</div></div>",73:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">AXI4STREAM Boolean data type</div></div>",74:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">When VIF driver is in idle mode, possible signals that can be driven on VIF</div></div>",75:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">Transaction data pattern which can be all valid bytes, all null bytes, all position bytes or a combination&nbsp; of these three.</div></div>",76:"<div class=\"NDToolTip TType LSystemVerilog\"><div class=\"TTSummary\">In axi4stream master driver, the time difference between the driver get the transaction and it starts to drive the data onto data bus is the delay. Depending on the delay policy, when it is XIL_AXI4STREAM_DELAY_INSERTION_FROM_IDLE,the driver can adjust the transfer delay to compensate for any backpressure observed for the prior transfer. Else it always using the delay in the transaction which the driver gets as the delay.</div></div>",78:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">The xil_object class is the base class for all Xilinx Verification Component data and hierarchical classes. Its primary role is to define a set of methods for common operations such as set name, verbosity, tag etc.</div></div>",93:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">The xil_reporter class is a class which extends from xil_object and add its own get_type_name function</div></div>",97:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">The xil_componennt class is a class which extends from xil_reporter and added its own new and get_type_name function</div></div>",101:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">The xil_agent class is a class which extends from xil_component.</div></div>",108:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">The xil_analysis_port is a parameterized class which extends from xil_component</div></div>",117:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">xil_sqr_if_base is a base class which provides the interfaces necessary in order to receive or send sequence items and/or other sequences. xil_sqr_if_base #(T1, T2)</div></div>",133:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">The xil_seq_item_pull_port#(REQ,RSP) class is extends from xil_sqr_if_base. It inherits all these variables and functions of xil_sqr_if_base.</div></div>",136:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">The xil_driver#(REQ, RSP) class is parameterized class which extends from xil_component.It is the base class of all xilinx VIP\'s driver class. It has one port which is seq_item_port</div></div>",145:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">The axi4stream_transaction class is the base class of AXI4STREAM Verification Component.It inherits all the methods of xil_sequence_item.In this transaction, it has cmd_id,dest,id,data,user,strb,keep,last, signal_set etc which can be accessed by set/get_x APIs.</div></div>",217:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">AXI4STREAM VIF Proxy Class. It has virtual interface for AXI4STREAM VIP interface. Drivers of AXI4STREAM VIP drive transaction/ready onto AXI4STREAM VIP bus interface through APIs(such as&nbsp; put_transaction) of this class, monitor of AXI4STREAM VIP collects AXI4STREAM interface information and convert it into transaction through APIs(get_transaction) in this class.</div></div>",260:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">AXI4Stream Ready generation class. Ready signal of AXI4STREAM VIP is generated independently from other attributes.&nbsp; This class is being used to generate all kinds of different patterns of ready signal which user wants. Please refer section READY Generation of PG277 for more details about how to generate ready.</div></div>",288:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">AXI4STREAM Master Driver Class. The driver receives transactions from the user environment and drives stream interface. It returns a completed transaction when the transaction is accepted when the transaction\'s driver_return_item_policy is set to XIL_AXI4STREAM_AT_ACCEPT_RETURN.</div></div>",301:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">AXI4STREAM Slave Driver Class. It receives TREADY transaction from the user enviroment and drives the TREADY signal if HAS_TREADY of the VIP is on, else TREADY is set to high all the time.</div></div>",311:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">AXI4STREAM Master Agent.&nbsp; it contains other components that comprise the entire Master Verification component.&nbsp; These are the Monitor,Driver -- refer PG277 section about AXI4-Stream Master Agent for more details.</div></div>",323:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">AXI4STREAM Slave agent. This class contains other components that comprise the entire Slave Verification component.These are the Monitor,Driver.Refer PG277 section about AXI4STREAM Slave Agent for more details.</div></div>",335:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">AXI4STREAM Passthrough Agent Class. The AXI4STREAM passthrough agent is comprised of other classes which are monitor,runtime master driver,&nbsp; runtime slave driver. By default, passthrough agent is in monitor mode. In order to issue transaction as master, it has to be switched to runtime master mode, in order to receive transaction, it has to be switched into runtime slave mode. Please refer PG 277 section about &quot;Useful Coding Guidelines and Examples&quot; for more details.</div></div>",706:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">AXI4STREAM Monitor Transaction class. It is an extension of axi4stream_transaction.</div></div>",711:"<div class=\"NDToolTip TClass LSystemVerilog\"><div class=\"TTSummary\">Axi4stream monitor Class.</div></div>"});