// ======== DYNAMIC UNPACKING

Start: old_buff = 1, new_buff = 0, old_ptr = 0, new_ptr = 0, [BUFF0 == EMPTY], [BUFF1 == EMPTY], state=IDLE

def write (axi_resp)

    // Write into unused buffer register
    BUFF[new_buff] = axi_resp

    If (state == overflow)
        old_bits = 512 - old_ptr
        { BUFF[old_buff][old_ptr:0], BUFF[new_buff][NODE_WIDTH-old_bits:0] } --> FIFO
        new_ptr = NODE_WIDTH - old_bits + 1
        state = WRITE

    updated_ptr = new_ptr + NODE_WIDTH

    while (updated_ptr < 512)
        BUFF[new_buff][new_ptr+WIDTH:new_ptr] --> FIFO
        new_ptr += NODE_WIDTH

    // Now, pointer increment will cause overflow
    old_buff = !old_buff
    new_buff = !new_buff;
    old_ptr = new_ptr
    new_ptr = 0

    state = updated_ptr == 512 ? IDLE : overflow